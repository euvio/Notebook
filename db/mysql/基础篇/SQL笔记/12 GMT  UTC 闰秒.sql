GMT，UTC，UNIX_TIME，时区

**什么是GMT**

GMT（Greenwich Mean Time）， 格林威治时间。它规定太阳每天经过位于英国伦敦郊区的皇家格林威治天文台的时间为中午12点。1884年10月在美国华盛顿召开了一个国际子午线会议，该会议将格林威治子午线设定为本初子午线(零度经线)，并将格林威治平时 (GMT, Greenwich Mean Time) 作为世界时间标准（UT, Universal Time）。由此也确定了全球24小时自然时区的划分，所有时区都以和 GMT 之间的偏移量做为参考，每隔15°是一个时区，相邻的时区相差1小时，零度经线以东是东时区，越靠东时间越早，零度经线以西，是西时区，越靠西时间越晚。全球共有 24 个时区，分为东西各 12 时区，分别是东+1区——东+8区，西-1区——西-8区，中国跨5个时区，但为了行政上得方便，全国采用东+8区，即北京时间。所以，时间需要与时区绑定才有意义，GMT 0时区的2022-06-18 00:00:00便是北京时间(东+8时区)的2022-06-18 08:00:00.

但格林威治时间存在一个缺陷。

理论上，任意两次GMT正午（太阳落在格林威治子午线时）之间的时间差是（3600 * 24）秒的整数倍，也就是任意两天的12:00:00的时间差是（3600 * 24）秒的整数倍，即2022年6月18日12:00:00与2022年6月17日12:00:00相差（3600 * 24）秒。但由于地球是不规则的球体和太空环境的影响(地球自转一圈的时间越来越久)，每天太阳落到格林威治子午线的时间距离昨天太阳落到格林威治子午线的时间的时间差并不是绝对严格的（3600 * 24）秒。但人们仍旧认为只要是正午（太阳落在格林威治子午线时）便是12:00:00，得到的时间差就是（3600 * 24）秒，这样就产生了时间和时间间隔的误差。

**UTC**

综合上述，由于两次太阳落在本初子午线的时间间隔并不是严格的（3600 * 24）秒，所以需要其他参照。科学家发现原子跃迁的频率极其稳定，便以GMT 0 时区 1970-01-01 00:00:00为基准，以原子跃迁周期作为计时器标志距离基础的秒数，计时器的总秒数 / （3600 * 24）算出天数得出当前的日期时间，这样，就消除了GMT中2022年6月18日12:00:00  -  2022年6月17日12:00:00不等于（3600 * 24）秒的问题。这种方式叫UTC(Coordinated Universal Time)协调世界时。我们常说的UTC时间其实就是UTC 0时区的时间。

但是UTC相比于GMT有个缺点，它虽然精确，但是随着地球自转越来越慢，导致虽然UTC 12:00:00了，但是太阳还未落到本初子午线上，即正午时刻不再是12:00:00。五千年后，也许珠海8点天未亮，正午可能是下午2点，但这与人们深深烙在脑子中12:00:00是正午的潜意识矛盾，而且我们的后代阅读我们当今的文档在感觉上会产生差异，比如后代阅读毛太祖的名言【世界是你们的，也是我们的，但是归根结底是你们的。你们青年人朝气蓬勃，正在兴旺时期，好像早晨八九点钟的太阳。希望寄托在你们身上。”】，可能会骂道：这人是傻逼吧，八九点太阳还没出来，万物一片漆黑。

那怎么办呢？世界相关组织决定，如果UTC时间和GMT时间相差即将超过0.9秒，就把UTC时间加快或减慢1秒，专业术语叫闰秒。这样做的好处就是UTC时间的12:00:00在将来几千年后也是正午时分，太阳在天空的中间。但是它也有个很大的缺点，UTC的计时器累积的时间明明是（假设）10000秒，但被拿来计算UTC时间时，人们偏偏以(10000 + 1)  / 3600 或(10000 - 1)  / 3600的方式计算，然后将计算得到的时间同步到全世界的电脑，手机中。人们看到的当前时间减去UTC基准1970-01-01 00:00:00得到的时间差并不与UTC计时器累积的秒数相同。我们假设宇宙飞船的运行永远是匀速的，如果科学家发射宇宙飞船时看了一眼电脑时间是2000-01-01 00:00:00，20年后，这个科学家又看了一眼电脑时间是2020-01-01 00:00:00，然后他用计算器算出2020-01-01 00:00:00与2000-01-01 00:00:00的时间差再乘以飞船的速度得出飞船的飞行距离，显然，科学家真的这么做，会把飞行距离算的偏小约70公里，所以，闰秒对科学领域的影响很大。程序员设计数据表的主键时，可能需要分布式场景下的唯一主键，Twitter的雪花算法依赖时间，如果生成主键服务器同步了UTC时间，由于闰秒的存在导致时钟回拨，那么雪花算法就无法保证主键的唯一性，产生BUG。

所以，目前世界上，对UTC时间是否支持闰秒，仍旧有很大争议。

**UNIX timestamp**

UNIX时间戳，又称Unix timestamp，Unix time，POSIX time，定义UTC 0时区当前时间距离格林威治时间1970年01月01日00时00分00秒的秒数，但UTC时间1970年01月01日00时00分00秒和格林威治时间1970年01月01日00时00分00秒被科学家定义为同一时刻，所以UNIX时间戳也指UTC 0时区当前时间距离UTC时间1970年01月01日00时00分00秒的秒数。

UNIX timestamp是一个无符号的整数，全球任意角落在同一时刻获取到的UNIX时间戳相同。

举个例子，北京时间 2021 年 1 月 28 日 0 时 0 分 0 秒用 RFC3339 表示为：`2021-01-28T00:00:00+08:00`。

`+08:00` 表示东 8 区，`2021-01-28T00:00:00` 表示这个时区的人所看到的时间。加号如果改为减号，则表示西时区。

比较特殊的是 UTC 时区，可以表示为 `2006-01-02T15:04:05+00:00`，但通常简化为 `2006-01-02T15:04:05Z`。

在使用的时候，应当根据时区调整时间的展示。例如 `1611792000` 可以表示为 `2021-01-28T00:00:00Z` 或者 `2021-01-28T08:00:00+08:00`。

Unix 时间戳是从1970年1月1日（UTC/GMT的午夜）开始所经过的秒数，不考虑闰秒。

UNIX时间戳在地球上的任何位置的值是相同的。

选择的时区不同，时间不同，带上时区的时间才有意义。



MySQL实例有自己的时区: my.cnf 中[mysqld] 部分 `default-time-zone='timezone'` → 全局变量GLOBAL.time_zone → 会话变量SESSION.time_zone.

在生产环境中，一旦设置好操作系统和MySQL实例的时区后续就不要修改了。